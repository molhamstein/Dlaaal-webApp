import { ResizeOptions } from "./ResizeOptions";
import { IImage } from "./CompressImage";
import { Observable } from "rxjs/Observable";
export declare class ImageCompressService {
    /**
     * Receives an Image Object (can be JPG OR PNG) and returns a new Image Object compressed
     * @param {Image} sourceImgObj The source Image Object
     * @param {Integer} quality The output quality of Image Object
     * @return {Image} result_image_obj The compressed Image Object
     */
    private static jicCompress(sourceImgObj, options);
    static compressImage(sourceImage: IImage, options: ResizeOptions, callback: any): void;
    static filesToCompressedImageSourceEx(fileList: FileList, option: ResizeOptions): Promise<Observable<IImage>>;
    static filesToCompressedImageSource(fileList: FileList): Promise<Observable<IImage>>;
    static filesArrayToCompressedImageSourceEx(fileList: File[], option: ResizeOptions): Promise<Observable<IImage>>;
    static filesArrayToCompressedImageSource(fileList: File[]): Promise<Observable<IImage>>;
    static IImageListToCompressedImageSource(images: IImage[]): Promise<IImage[]>;
    static IImageListToCompressedImageSourceEx(images: IImage[], resizeOption: ResizeOptions): Promise<IImage[]>;
}
